{"version":3,"sources":["utils/date-helpers.js","hooks/useGetTimeRemaining.js","components/CountDownBlocks/CountDownBlocks.jsx","components/Home/Home.jsx","App.js","reportWebVitals.js","index.js"],"names":["getTimeRemaining","endtime","total","Date","parse","toString","seconds","Math","floor","minutes","hours","days","value","unit","useGetTimeRemaining","endTime","React","useState","moment","toDate","timeRemaining","setTimeRemaining","useEffect","interval","setInterval","clearInterval","CountDownBlocks","className","Object","keys","map","key","i","toUpperCase","Home","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0QACO,SAASA,EAAiBC,GAC/B,IAAMC,EAAQC,KAAKC,MAAMH,EAAQI,YAAcF,KAAKC,OAAM,IAAID,MAAOE,YAC/DC,EAAUC,KAAKC,MAAON,EAAQ,IAAQ,IACtCO,EAAUF,KAAKC,MAAON,EAAQ,IAAO,GAAM,IAC3CQ,EAAQH,KAAKC,MAAON,EAAK,KAAuB,IAChDS,EAAOJ,KAAKC,MAAMN,EAAK,OAE7B,MAAO,CACLS,KAAM,CACJC,MAAOD,EACPE,KAAK,GAAD,OAAc,IAATF,EAAa,MAAQ,SAEhCD,MAAO,CACLE,MAAOF,EACPG,KAAK,GAAD,OAAe,IAAVH,EAAc,OAAS,UAElCD,QAAS,CACPG,MAAOH,EACPI,KAAK,GAAD,OAAiB,IAAZJ,EAAgB,SAAW,YAEtCH,QAAS,CACPM,MAAON,EAEPO,KAAM,Y,oBCDGC,MAnBf,SAA6BC,GAC3B,MAA0CC,IAAMC,SAC9CjB,EAAiBkB,IAAOH,GAASI,WADnC,mBAAOC,EAAP,KAAsBC,EAAtB,KAeA,OAVAL,IAAMM,WAAU,WACd,IAAMC,EAAWC,aAAY,WAC3BH,EAAiBrB,EAAiBkB,IAAOH,GAASI,aACjD,KAEH,OAAO,WACLM,cAAcF,MAEf,CAACR,IAEGK,G,eCUMM,EA1BQ,SAAC,GAAiB,IAAfX,EAAc,EAAdA,QAClBK,EAAgBN,EAAoBC,GAC1C,OAAKK,EAEH,sBAAKO,UAAU,YAAf,UACE,qBAAKA,UAAU,kBAAf,SACGC,OAAOC,KAAKT,GAAeU,KAAI,SAACC,EAAKC,GAClC,OACE,sBAAKL,UAAU,QAAf,UACE,8BACE,mBAAGA,UAAU,aAAb,SACGP,EAAcW,GAAKnB,UAGxB,mBAAGe,UAAU,YAAb,SACGP,EAAcW,GAAKlB,KAAKoB,kBAPDF,EAAMC,QAa1C,mBAAGL,UAAU,YAAb,8CAnBuB,MCOdO,EATF,WACX,IAAMnB,EAAUG,IAAO,uBAAuBC,SAC9C,OACE,qBAAKQ,UAAU,YAAf,SACE,cAAC,EAAD,CAAiBZ,QAASA,OCIjBoB,MARf,WACE,OACE,qBAAKR,UAAU,MAAf,SACE,cAAC,EAAD,OCKSS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.89fdfc0e.chunk.js","sourcesContent":["// https://www.sitepoint.com/build-javascript-countdown-timer-no-dependencies/\nexport function getTimeRemaining(endtime: Date): TimeRemaining {\n  const total = Date.parse(endtime.toString()) - Date.parse(new Date().toString());\n  const seconds = Math.floor((total / 1000) % 60);\n  const minutes = Math.floor((total / 1000 / 60) % 60);\n  const hours = Math.floor((total / (1000 * 60 * 60)) % 24);\n  const days = Math.floor(total / (1000 * 60 * 60 * 24));\n\n  return {\n    days: {\n      value: days,\n      unit: `${days === 1 ? 'day' : 'days'}`,\n    },\n    hours: {\n      value: hours,\n      unit: `${hours === 1 ? 'hour' : 'hours'}`,\n    },\n    minutes: {\n      value: minutes,\n      unit: `${minutes === 1 ? 'minute' : 'minutes'}`,\n    },\n    seconds: {\n      value: seconds,\n      // Don't check for singular tense because it occurs so frequently & briefly\n      unit: 'seconds',\n    },\n  };\n}\n\n","import React from 'react';\nimport { getTimeRemaining } from '../utils/date-helpers';\nimport moment from 'moment';\n\nfunction useGetTimeRemaining(endTime) {\n  const [timeRemaining, setTimeRemaining] = React.useState(\n    getTimeRemaining(moment(endTime).toDate())\n  );\n  // Interval implementation - https://stackoverflow.com/a/63334017\n  // fires checkTimeRemaining every 1000 ms (1 second)\n  React.useEffect(() => {\n    const interval = setInterval(() => {\n      setTimeRemaining(getTimeRemaining(moment(endTime).toDate()));\n    }, 1000);\n    // clear interval to prevent memory leaks / other performance issues\n    return () => {\n      clearInterval(interval);\n    };\n  }, [endTime]);\n\n  return timeRemaining;\n}\n\nexport default useGetTimeRemaining;\n","import React from 'react';\nimport useGetTimeRemaining from '../../hooks/useGetTimeRemaining';\nimport './CountDownBlocks.css'\n\nconst CountDownBlocks= ({ endTime }) => {\n  const timeRemaining = useGetTimeRemaining(endTime);\n  if (!timeRemaining) return null;\n  return (\n    <div className=\"container\">\n      <div className=\"blocksContainer\">\n        {Object.keys(timeRemaining).map((key, i) => {\n            return (\n              <div className=\"block\" key={key + i}>\n                <div>\n                  <p className=\"blockValue\">\n                    {timeRemaining[key].value}\n                  </p>\n                </div>\n                <p className=\"blockText\">\n                  {timeRemaining[key].unit.toUpperCase()}\n                </p>\n              </div>\n            );\n        })}\n      </div>\n      <p className=\"untilText\">UNTIL ARIANA MOVES TO DENVER!</p>\n    </div>\n  );\n};\n\nexport default CountDownBlocks;\n","import './Home.css'\nimport CountDownBlocks from '../CountDownBlocks/CountDownBlocks'\nimport moment from 'moment'\n\nconst Home = () => {\n  const endTime = moment('09/25/2021, 5:00 pm').toDate()\n  return (\n    <div className=\"container\">\n      <CountDownBlocks endTime={endTime} />\n    </div>\n  )\n}\n\nexport default Home;","// import 'normalize.css';\nimport './App.css';\nimport Home from './components/Home/Home.jsx'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}